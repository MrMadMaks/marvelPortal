{"version":3,"sources":["resources/img/error.gif","components/errorMessage/ErrorMessage.js","components/services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_apiBase","_apiKey","loading","error","request","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComic","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","console","log","res","results","map","getCharacter","getAllComics","getComic","AppBanner","_jsxs","className","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","newItemLoading","setNewItemLoading","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","arr","item","i","Link","to","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment"],"mappings":"iGAAe,UAA0B,kC,OCQ1BA,IANMA,IAEbC,cAAA,OAAKC,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAYC,IAAKC,EAAKC,IAAI,W,2CC2DlHC,IA7DUA,KACrB,MAAMC,EAAW,4CACXC,EAAU,2CAGV,QAAEC,EAAO,MAAEC,EAAK,QAAEC,EAAO,WAAEC,GCLdC,MACnB,MAAOJ,EAASK,GAAcC,oBAAS,IAChCL,EAAOM,GAAYD,mBAAS,MA0BnC,MAAO,CAAEN,UAASC,QAAOC,QAxBTM,uBAAYC,eAAOC,GAAwF,IAAnFC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE7FP,GAAW,GAEX,IACI,MAAMY,QAAiBC,MAAMR,EAAK,CAAEC,SAAQI,OAAMC,YAElD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,cAAAW,OAAaJ,EAASK,SAGhE,MAAMC,QAAaN,EAASO,OAG5B,OADAnB,GAAW,GACJkB,EACT,MAAOE,GAGL,MAFApB,GAAW,GACXE,EAASkB,EAAEC,SACLD,KAEX,IAI+BtB,WAFfK,uBAAY,IAAMD,EAAS,OAAO,MDrBLH,GAyB1CuB,EAAuBC,IAClB,CACHC,GAAID,EAAKC,GACTC,KAAMF,EAAKE,KACXC,YAAaH,EAAKG,YAAW,GAAAV,OAAMO,EAAKG,YAAYC,MAAM,EAAG,KAAI,OAAQ,6CACzEC,UAAWL,EAAKK,UAAUC,KAAO,IAAMN,EAAKK,UAAUE,UACtDC,SAAUR,EAAKS,KAAK,GAAG3B,IACvB4B,KAAMV,EAAKS,KAAK,GAAG3B,IACnB6B,OAAQX,EAAKW,OAAOC,QAItBC,EAAmBF,IAAY,IAADG,EAChC,MAAO,CACHb,GAAIU,EAAOV,GACXc,MAAOJ,EAAOI,MACdZ,YAAaQ,EAAOR,aAAe,0BACnCa,UAAWL,EAAOK,UAAS,GAAAvB,OAClBkB,EAAOK,UAAS,OACnB,2CACNX,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DU,UAA+B,QAArBH,EAAAH,EAAOO,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAC7CE,MAAOR,EAAOS,OAAO,GAAGD,MAAK,GAAA1B,OACpBkB,EAAOS,OAAO,GAAGD,MAAK,KACzB,kBAId,MAAO,CAAE/C,UAASC,QAAOE,aAAY8C,iBAnDZxC,iBAAiC,IAA1ByC,EAAMtC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAJlB,IAKhBuC,QAAQC,IAAI,oBACZ,MAAMC,QAAYnD,EAAQ,GAADmB,OAAIvB,EAAQ,8BAAAuB,OAA6B6B,EAAM,KAAA7B,OAAItB,IAC5E,OAAOsD,EAAI9B,KAAK+B,QAAQC,IAAI5B,IAgDuB6B,aA7ClC/C,UACjB,MAAM4C,QAAYnD,EAAQ,GAADmB,OAAIvB,EAAQ,eAAAuB,OAAcQ,EAAE,KAAAR,OAAItB,IACzD,OAAO4B,EAAoB0B,EAAI9B,KAAK+B,QAAQ,KA2CqBG,aAxChDhD,iBAAuB,IAAhByC,EAAMtC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACjC,MAAMyC,QAAYnD,EAAQ,GAADmB,OAClBvB,EAAQ,8CAAAuB,OAA6C6B,EAAM,KAAA7B,OAAItB,IAEtE,OAAOsD,EAAI9B,KAAK+B,QAAQC,IAAId,IAoCmDiB,SAjClEjD,UACb,MAAM4C,QAAYnD,EAAQ,GAADmB,OAAIvB,EAAQ,WAAAuB,OAAUQ,EAAE,KAAAR,OAAItB,IACrD,OAAO0C,EAAgBY,EAAI9B,KAAK+B,QAAQ,Q,+DE7BjC,MAA0B,qCCA1B,MAA0B,0C,OCiB1BK,IAbGA,IAEVC,eAAA,OAAKC,UAAU,cAAaC,SAAA,CACxB3E,cAAA,OAAKO,IAAKqE,EAAUnE,IAAI,aACxBgE,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,yBACR3E,cAAA,SAAK,iBAG/BA,cAAA,OAAKO,IAAKsE,EAAcpE,IAAI,sB,4HCmEzBqE,MAvEIA,KAEf,MAAOC,EAAYC,GAAiB7D,mBAAS,KACtC8D,EAAgBC,GAAqB/D,oBAAS,IAC9C4C,EAAQoB,GAAahE,mBAAS,IAC9BiE,EAAaC,GAAkBlE,oBAAS,IAEzC,QAAEN,EAAO,MAAEC,EAAK,aAAEwD,GAAiB5D,cAEzC4E,qBAAU,KACNC,EAAUxB,GAAQ,KACnB,IAEH,MAAMwB,EAAYA,CAACxB,EAAQyB,KACbN,GAAVM,GACAlB,EAAaP,GACR0B,KAAKC,IAGRA,EAAsBC,IACxB,IAAIC,GAAQ,EACRD,EAAcjE,OAAS,IACvBkE,GAAQ,GAEZZ,EAAc,IAAID,KAAeY,IACjCT,GAAkB,GAClBC,EAAUpB,EAAS,GACnBsB,EAAeO,IAuBnB,MAAMvC,EApBN,SAAqBwC,GACjB,MAAMxC,EAAQwC,EAAIzB,KAAI,CAAC0B,EAAMC,IAErB/F,cAAA,MAAI0E,UAAU,eAAcC,SACxBF,eAACuB,IAAI,CAACC,GAAE,GAAA/D,OAAK4D,EAAKpD,IAAKiC,SAAA,CACnB3E,cAAA,OAAKO,IAAKuF,EAAKhD,UAAWrC,IAAKqF,EAAKtC,MAAOkB,UAAU,qBACrD1E,cAAA,OAAK0E,UAAU,oBAAmBC,SAAEmB,EAAKtC,QACzCxD,cAAA,OAAK0E,UAAU,qBAAoBC,SAAEmB,EAAKlC,YAJhBmC,KAU1C,OACI/F,cAAA,MAAI0E,UAAU,eAAcC,SACvBtB,IAKC6C,CAAYnB,GAEpBoB,EAAerF,EAAQd,cAACD,IAAY,IAAM,KAC1CqG,EAAUvF,IAAYoE,EAAiBjF,cAACqG,IAAO,IAAM,KAE3D,OACI5B,eAAA,OAAKC,UAAU,eAAcC,SAAA,CACxBwB,EACAC,EACA/C,EACDrD,cAAA,UACIsG,SAAUrB,EACVhF,MAAO,CAAE,QAAWmF,EAAc,OAAS,SAC3CV,UAAU,mCACV6B,QAASA,IAAMhB,EAAUxB,GAAQY,SACjC3E,cAAA,OAAK0E,UAAU,QAAOC,SAAC,oBC7DxB6B,UATIA,IAEX/B,eAAAgC,WAAA,CAAA9B,SAAA,CACI3E,cAACwE,IAAS,IACVxE,cAAC8E,EAAU","file":"static/js/4.260dd7fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from '../../resources/img/error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\r\n    const _baseOffset = 210;\r\n\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        console.log(\"getAllCharacters\");\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers })\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, error, request, clearError }\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { loading, error, getAllComics } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li >\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}