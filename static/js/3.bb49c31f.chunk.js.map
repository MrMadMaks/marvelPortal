{"version":3,"sources":["resources/img/error.gif","components/errorMessage/ErrorMessage.js","components/services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_apiBase","_apiKey","loading","error","request","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComic","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","console","log","res","results","map","getCharacter","getAllComics","getComic","View","_ref","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","arr","item","i","tabIndex","ref","el","current","onCharSelected","forEach","classList","remove","add","focus","renderItems","disabled","Skeleton","_Fragment","comicId","resourceURI","match","Link","to","CharInfo","charId","skeleton","ErrorBoundary","Component","constructor","state","componentDidCatch","err","errInfo","this","setState","render","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.bb49c31f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from '../../resources/img/error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\r\n    const _baseOffset = 210;\r\n\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        console.log(\"getAllCharacters\");\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers })\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, error, request, clearError }\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                //onKeyPress={(e) => {\n                //    if (e.key === ' ' || e.key === \"Enter\") {\n                //        props.onCharSelected(item.id);\n                //        focusOnItem(i);\n                //    }\n                //}}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return;\n\n                        const comicId = item.resourceURI.match(/(\\d+)\\/?$/)[1];\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`comics/${comicId}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(err, errInfo) {\r\n        console.log(err, errInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport { useState } from \"react\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}