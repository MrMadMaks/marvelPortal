{"version":3,"sources":["resources/img/error.gif","components/errorMessage/ErrorMessage.js","components/services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_apiBase","_apiKey","loading","error","request","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComic","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","console","log","res","results","map","getCharacter","getAllComics","getComic","AppBanner","_jsxs","className","children","avengers","avengersLogo","View","_ref","comic","Link","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/5.cdc583d9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from '../../resources/img/error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\r\n    const _baseOffset = 210;\r\n\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        console.log(\"getAllCharacters\");\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    };\r\n\r\n    return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers })\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            setLoading(false)\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, error, request, clearError }\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const { comicId } = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic()\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({ comic }) => {\r\n    const { title, description, pageCount, thumbnail, language, price } = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"..\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;\r\n"],"sourceRoot":""}